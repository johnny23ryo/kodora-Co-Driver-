<div class="min-h-screen flex items-center justify-center">
  <div class="w-full max-w-3xl p-8 rounded-lg shadow-lg bg-gray-200">
    <h1 class="font-bold text-center mb-6 text-4xl">投稿編集</h1>
    <% if @post.errors.any? %>
      <div class="bg-red-500 p-4 mb-6">
        <ul>
          <% @post.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>
    <div class="p-6">
      <%= form_with model: @post, local: true, html: { multipart: true }, class: "space-y-6" do |f| %>
        <div>
          <%= f.label :post_image, "イベントイメージ画像( png, jpg, jpeg, gif 対応 )", class: "block text-2xl font-bold mb-2", accept: 'image/png,image/gif,image/jpeg,image/jpg' %>
          <%= f.file_field :post_image, class: "form-input mt-1 block w-full text-2xl text-black bg-gray-100 rounded-md" %>
        </div>
        <div>
          <%= f.label :title, "イベントタイトル( 必須 )", class: "block text-2xl font-bold mb-2" %>
          <%= f.text_field :title, class: "form-input mt-1 block w-full text-2xl text-black bg-gray-100 rounded-md" %>
        </div>
        <div>
          <%= f.label :address, "場所", class: "block text-2xl font-bold mb-2" %>
          <%= f.text_field :address, id: "Address", placeholder: "名古屋城などと入力すると候補が出ます", class: "form-input mt-1 block w-full text-2xl text-black bg-gray-100 rounded-md", autocomplete: "off" %>
        </div>
        <div>
          <%= f.label :start_date, "イベント開始日", class: "block text-2xl font-bold mb-2" %>
          <%= f.date_field :start_date, class: "form-input mt-1 block w-full text-2xl text-black bg-gray-100 rounded-md" %>
        </div>
        <div>
          <%= f.label :end_date, "イベント終了日", class: "block text-2xl font-bold mb-2" %>
          <%= f.date_field :end_date, class: "form-input mt-1 block w-full text-2xl text-black bg-gray-100 rounded-md" %>
        </div>
        <div class="text-center mt-6">
          <%= f.submit "更新", class: "text-2xl bg-blue-500 text-white font-bold py-4 px-12 rounded-lg hover:scale-105 duration-300 cursor-pointer", data: { turbo: false } %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script type="text/javascript">
  // initialize関数の定義。Google Maps Autocompleteの初期化を行う
  function initialize() {
    // 住所入力フィールドを取得
    var inputAddress = document.getElementById('Address');

    // オートコンプリートのオプションを設定（ここでは 'establishment' タイプのみを対象とする）
    var options = {
      types: ['establishment'],
    };

    // 住所入力フィールドにGoogle Maps Autocompleteを適用
    var autocompleteAddress = new google.maps.places.Autocomplete(inputAddress, options);

    // オートコンプリートで場所が選択されたときに呼び出されるリスナーを追加
    autocompleteAddress.addListener('place_changed', function() {
      // 選択された場所の情報を取得
      var place = autocompleteAddress.getPlace();

      // フォーマットされた住所を取得
      var address = place.formatted_address;

      // 住所から "日本、" を削除
      address = address.replace("日本、", "").trim();

      // 修正された住所を入力フィールドに設定
      inputAddress.value = address;
    });
  }

  // ドキュメントの読み込みが完了したときにinitialize関数を実行
  document.addEventListener('DOMContentLoaded', function() {
    // Google Maps APIのスクリプトを動的に作成
    var script = document.createElement('script');

    // APIキーとコールバック関数を含むスクリプトのURLを設定
    script.src = `https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places&callback=initialize`;

    // スクリプトを非同期で読み込み
    script.async = true;

    // スクリプトを遅延読み込み
    script.defer = true;

    // スクリプトをドキュメントのボディに追加して実行
    document.body.appendChild(script);
  });
</script>
